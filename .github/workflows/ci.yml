name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # Server Tests
  server-tests:
    name: Server Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Setup database
        working-directory: ./server
        run: |
          npm run db:generate
          npm run db:push
        env:
          DATABASE_URL: mysql://root:root@localhost:3306/test_db

      - name: Run server tests
        working-directory: ./server
        run: npm run test:ci
        env:
          NODE_ENV: test
          DATABASE_URL: mysql://root:root@localhost:3306/test_db

      - name: Upload server test reports
        if: always() && hashFiles('server/reports/junit/**/*.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: server-junit
          path: server/reports/junit

      - name: Upload server test coverage
        if: always() && hashFiles('server/coverage/**/*') != ''
        uses: actions/upload-artifact@v4
        with:
          name: server-coverage
          path: server/coverage

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./server/coverage/lcov.info
          flags: server
          name: server-coverage

  # Client Tests
  client-tests:
    name: Client Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Run client tests
        working-directory: ./client
        run: npm run test:ci
        env:
          NODE_ENV: test

      - name: Upload client test reports
        if: always() && hashFiles('client/reports/junit/**/*.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: client-junit
          path: client/reports/junit

      - name: Upload client test coverage
        if: always() && hashFiles('client/coverage/**/*') != ''
        uses: actions/upload-artifact@v4
        with:
          name: client-coverage
          path: client/coverage

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./client/coverage/lcov.info
          flags: client
          name: client-coverage

  # Linting
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Lint server code
        working-directory: ./server
        run: npm run lint

      - name: Lint client code
        working-directory: ./client
        run: npm run lint



  # Type Checking
  type-check:
    name: Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Type check server
        working-directory: ./server
        run: npm run typecheck

      - name: Type check client
        working-directory: ./client
        run: npm run typecheck

  # Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [server-tests, client-tests, lint, type-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Build server
        working-directory: ./server
        run: npm run build

      - name: Build client
        working-directory: ./client
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            server/dist/
            client/dist/

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [server-tests, client-tests, lint, type-check]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Install e2e dependencies
        working-directory: ./e2e
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./e2e
        run: npx playwright install chromium

      - name: Setup database
        working-directory: ./server
        run: |
          npm run db:generate
          npm run db:push
        env:
          DATABASE_URL: mysql://root:root@localhost:3306/test_db

      - name: Start server
        working-directory: ./server
        run: npm run dev &
        env:
          DATABASE_URL: mysql://root:root@localhost:3306/test_db

      - name: Start client
        working-directory: ./client
        run: npm run dev &
        env:
          VITE_API_URL: http://localhost:3000
          VITE_CLERK_PUBLISHABLE_KEY: pk_test_d2lzZS12aXBlci00OC5jbGVyay5hY2NvdW50cy5kZXYk

      - name: Wait for applications
        run: sleep 15

      - name: Run E2E tests
        working-directory: ./e2e
        run: npm run test:ci

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 30

  # Security Scan (Non-blocking)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../server && npm ci

      - name: Run security audit
        run: |
          echo "Running security audit..."
          npm audit --json > security-report.json || echo "Root security issues found (non-blocking)"
          cd client && npm audit --json > ../client-security-report.json || echo "Client security issues found (non-blocking)"
          cd ../server && npm audit --json > ../server-security-report.json || echo "Server security issues found (non-blocking)"
          cd ..

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: |
            security-report.json
            client-security-report.json
            server-security-report.json
          retention-days: 30
