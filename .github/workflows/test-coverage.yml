name: Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Setup database
        working-directory: ./server
        run: |
          npm run db:generate
          npm run db:push
        env:
          DATABASE_URL: mysql://root:root@localhost:3306/test_db

      - name: Run server tests with coverage
        working-directory: ./server
        run: npm test -- --coverage
        env:
          DATABASE_URL: mysql://root:root@localhost:3306/test_db

      - name: Run client tests with coverage
        working-directory: ./client
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: |
            ./server/coverage/lcov.info
            ./client/coverage/lcov.info
          flags: |
            server
            client
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Generate coverage report
        run: |
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "./server/coverage/lcov.info" ]; then
            echo "### Server Coverage" >> $GITHUB_STEP_SUMMARY
            echo "- Lines: $(grep -o 'LF:[0-9]*' ./server/coverage/lcov.info | cut -d: -f2 | paste -sd+ | bc)%" >> $GITHUB_STEP_SUMMARY
            echo "- Functions: $(grep -o 'FNF:[0-9]*' ./server/coverage/lcov.info | cut -d: -f2 | paste -sd+ | bc)%" >> $GITHUB_STEP_SUMMARY
            echo "- Branches: $(grep -o 'BRF:[0-9]*' ./server/coverage/lcov.info | cut -d: -f2 | paste -sd+ | bc)%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "./client/coverage/lcov.info" ]; then
            echo "### Client Coverage" >> $GITHUB_STEP_SUMMARY
            echo "- Lines: $(grep -o 'LF:[0-9]*' ./client/coverage/lcov.info | cut -d: -f2 | paste -sd+ | bc)%" >> $GITHUB_STEP_SUMMARY
            echo "- Functions: $(grep -o 'FNF:[0-9]*' ./client/coverage/lcov.info | cut -d: -f2 | paste -sd+ | bc)%" >> $GITHUB_STEP_SUMMARY
            echo "- Branches: $(grep -o 'BRF:[0-9]*' ./client/coverage/lcov.info | cut -d: -f2 | paste -sd+ | bc)%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            server/coverage/
            client/coverage/
          retention-days: 30

      - name: Check coverage thresholds
        run: |
          # Define minimum coverage thresholds
          MIN_LINE_COVERAGE=80
          MIN_FUNCTION_COVERAGE=80
          MIN_BRANCH_COVERAGE=70
          
          echo "Checking coverage thresholds..."
          
          # Check server coverage
          if [ -f "./server/coverage/lcov.info" ]; then
            SERVER_LINE_COVERAGE=$(grep -o 'LF:[0-9]*' ./server/coverage/lcov.info | cut -d: -f2 | paste -sd+ | bc)
            SERVER_FUNCTION_COVERAGE=$(grep -o 'FNF:[0-9]*' ./server/coverage/lcov.info | cut -d: -f2 | paste -sd+ | bc)
            SERVER_BRANCH_COVERAGE=$(grep -o 'BRF:[0-9]*' ./server/coverage/lcov.info | cut -d: -f2 | paste -sd+ | bc)
            
            if [ "$SERVER_LINE_COVERAGE" -lt "$MIN_LINE_COVERAGE" ]; then
              echo "❌ Server line coverage ($SERVER_LINE_COVERAGE%) is below threshold ($MIN_LINE_COVERAGE%)"
              exit 1
            fi
            
            if [ "$SERVER_FUNCTION_COVERAGE" -lt "$MIN_FUNCTION_COVERAGE" ]; then
              echo "❌ Server function coverage ($SERVER_FUNCTION_COVERAGE%) is below threshold ($MIN_FUNCTION_COVERAGE%)"
              exit 1
            fi
            
            if [ "$SERVER_BRANCH_COVERAGE" -lt "$MIN_BRANCH_COVERAGE" ]; then
              echo "❌ Server branch coverage ($SERVER_BRANCH_COVERAGE%) is below threshold ($MIN_BRANCH_COVERAGE%)"
              exit 1
            fi
            
            echo "✅ Server coverage meets thresholds"
          fi
          
          # Check client coverage
          if [ -f "./client/coverage/lcov.info" ]; then
            CLIENT_LINE_COVERAGE=$(grep -o 'LF:[0-9]*' ./client/coverage/lcov.info | cut -d: -f2 | paste -sd+ | bc)
            CLIENT_FUNCTION_COVERAGE=$(grep -o 'FNF:[0-9]*' ./client/coverage/lcov.info | cut -d: -f2 | paste -sd+ | bc)
            CLIENT_BRANCH_COVERAGE=$(grep -o 'BRF:[0-9]*' ./client/coverage/lcov.info | cut -d: -f2 | paste -sd+ | bc)
            
            if [ "$CLIENT_LINE_COVERAGE" -lt "$MIN_LINE_COVERAGE" ]; then
              echo "❌ Client line coverage ($CLIENT_LINE_COVERAGE%) is below threshold ($MIN_LINE_COVERAGE%)"
              exit 1
            fi
            
            if [ "$CLIENT_FUNCTION_COVERAGE" -lt "$MIN_FUNCTION_COVERAGE" ]; then
              echo "❌ Client function coverage ($CLIENT_FUNCTION_COVERAGE%) is below threshold ($MIN_FUNCTION_COVERAGE%)"
              exit 1
            fi
            
            if [ "$CLIENT_BRANCH_COVERAGE" -lt "$MIN_BRANCH_COVERAGE" ]; then
              echo "❌ Client branch coverage ($CLIENT_BRANCH_COVERAGE%) is below threshold ($MIN_BRANCH_COVERAGE%)"
              exit 1
            fi
            
            echo "✅ Client coverage meets thresholds"
          fi

  coverage-comment:
    name: Comment Coverage on PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: coverage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: coverage/

      - name: Comment PR with coverage
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let comment = '## 📊 Test Coverage Report\n\n';
            
            // Read server coverage
            if (fs.existsSync('./coverage/server/coverage/lcov.info')) {
              const serverLcov = fs.readFileSync('./coverage/server/coverage/lcov.info', 'utf8');
              const lines = serverLcov.split('\n');
              let totalLines = 0, coveredLines = 0;
              let totalFunctions = 0, coveredFunctions = 0;
              let totalBranches = 0, coveredBranches = 0;
              
              lines.forEach(line => {
                if (line.startsWith('LF:')) {
                  const [lf, lh] = line.split(':')[1].split(',');
                  totalLines += parseInt(lf);
                  coveredLines += parseInt(lh);
                }
                if (line.startsWith('FNF:')) {
                  const [fnf, fnh] = line.split(':')[1].split(',');
                  totalFunctions += parseInt(fnf);
                  coveredFunctions += parseInt(fnh);
                }
                if (line.startsWith('BRF:')) {
                  const [brf, brh] = line.split(':')[1].split(',');
                  totalBranches += parseInt(brf);
                  coveredBranches += parseInt(brh);
                }
              });
              
              const lineCoverage = totalLines > 0 ? Math.round((coveredLines / totalLines) * 100) : 0;
              const functionCoverage = totalFunctions > 0 ? Math.round((coveredFunctions / totalFunctions) * 100) : 0;
              const branchCoverage = totalBranches > 0 ? Math.round((coveredBranches / totalBranches) * 100) : 0;
              
              comment += `### 🖥️ Server Coverage\n`;
              comment += `- **Lines:** ${lineCoverage}%\n`;
              comment += `- **Functions:** ${functionCoverage}%\n`;
              comment += `- **Branches:** ${branchCoverage}%\n\n`;
            }
            
            // Read client coverage
            if (fs.existsSync('./coverage/client/coverage/lcov.info')) {
              const clientLcov = fs.readFileSync('./coverage/client/coverage/lcov.info', 'utf8');
              const lines = clientLcov.split('\n');
              let totalLines = 0, coveredLines = 0;
              let totalFunctions = 0, coveredFunctions = 0;
              let totalBranches = 0, coveredBranches = 0;
              
              lines.forEach(line => {
                if (line.startsWith('LF:')) {
                  const [lf, lh] = line.split(':')[1].split(',');
                  totalLines += parseInt(lf);
                  coveredLines += parseInt(lh);
                }
                if (line.startsWith('FNF:')) {
                  const [fnf, fnh] = line.split(':')[1].split(',');
                  totalFunctions += parseInt(fnf);
                  coveredFunctions += parseInt(fnh);
                }
                if (line.startsWith('BRF:')) {
                  const [brf, brh] = line.split(':')[1].split(',');
                  totalBranches += parseInt(brf);
                  coveredBranches += parseInt(brh);
                }
              });
              
              const lineCoverage = totalLines > 0 ? Math.round((coveredLines / totalLines) * 100) : 0;
              const functionCoverage = totalFunctions > 0 ? Math.round((coveredFunctions / totalFunctions) * 100) : 0;
              const branchCoverage = totalBranches > 0 ? Math.round((coveredBranches / totalBranches) * 100) : 0;
              
              comment += `### 🌐 Client Coverage\n`;
              comment += `- **Lines:** ${lineCoverage}%\n`;
              comment += `- **Functions:** ${functionCoverage}%\n`;
              comment += `- **Branches:** ${branchCoverage}%\n\n`;
            }
            
            comment += '---\n*This report was generated automatically by GitHub Actions.*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
