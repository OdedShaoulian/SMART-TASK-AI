name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    # environment: staging  # Uncomment after creating environment in repo settings

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Build server
        working-directory: ./server
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Build client
        working-directory: ./client
        run: npm run build

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: rsync, docker push, or cloud platform deployment

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Successfully deployed to staging"
          # Add notification logic (Slack, Discord, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment to staging failed"
          # Add notification logic (Slack, Discord, etc.)

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    # environment: production  # Uncomment after creating environment in repo settings

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Build server
        working-directory: ./server
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Build client
        working-directory: ./client
        run: npm run build

      - name: Run database migrations
        working-directory: ./server
        run: npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: rsync, docker push, or cloud platform deployment

      - name: Health check
        run: |
          echo "Performing health check..."
          # Add health check logic
          # Example: curl -f http://your-app-url/health

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Successfully deployed to production"
          # Add notification logic (Slack, Discord, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment to production failed"
          # Add notification logic (Slack, Discord, etc.)

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs: [deploy-staging, deploy-production]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          echo "Rolling back deployment..."
          # Add rollback logic here
          # Example: revert to previous version, restore database backup, etc.

      - name: Notify rollback
        run: |
          echo "üîÑ Deployment rolled back"
          # Add notification logic (Slack, Discord, etc.)
